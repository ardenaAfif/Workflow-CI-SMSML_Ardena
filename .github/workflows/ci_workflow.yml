name: CI Workflow for Shopping Trends

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  MLFLOW_EXPERIMENT_NAME: "Shopping_Trends_CI"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    - name: ‚¨áÔ∏è Checkout Repository
      uses: actions/checkout@v3

    - name: üêç Set up Python 3.12.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.7'

    - name: üîç Check Python & Pip Version
      run: |
        python --version
        pip --version

    - name: üì¶ Install Dependencies
      run: |
        if [ -f ./MLProject/requirements.txt ]; then
          pip install -r ./MLProject/requirements.txt
        else
          echo "File MLProject/requirements.txt tidak ditemukan."
        fi
        
        echo "Mencoba menghapus mlflow yang mungkin sudah terinstal..."
        pip uninstall -y mlflow || echo "mlflow tidak terinstal sebelumnya atau gagal dihapus (tidak masalah)."
        
        echo "Menginstal mlflow==2.19.0 dan dependensi lain..."
        pip install --no-cache-dir "mlflow==2.19.0" scikit-learn pandas matplotlib seaborn
        
        echo "============================================"
        echo "VERSI MLFLOW YANG TERINSTAL SETELAH INSTALASI EKSPLISIT:"
        pip show mlflow
        mlflow --version # Cara lain untuk mengecek versi CLI
        echo "LOKASI MLFLOW CLI:"
        which mlflow
        echo "============================================"

    - name: üöÄ Run MLflow Project
      run: |
        mlflow run ./MLProject \
          --env-manager=local \
          -P data_file=processed_shopping_trends.csv \
          -P experiment_name=${{ env.MLFLOW_EXPERIMENT_NAME }} \
          -P n_estimators=100 \
          -P max_depth=None \
          -P min_samples_split=2 \
          -P min_samples_leaf=1 \
          -P class_weight=None \
          -P run_name=RF_CI_Classifier_Run

    - name: üÜî Get MLflow Experiment ID and Latest Run ID
      id: get_ids
      run: |
        import os
        from mlflow.tracking import MlflowClient

        experiment_name = os.environ["MLFLOW_EXPERIMENT_NAME"]
        client = MlflowClient()

        experiment = client.get_experiment_by_name(experiment_name)
        if experiment is None:
            raise Exception(f"Experiment '{experiment_name}' not found.")
        experiment_id = experiment.experiment_id
        print(f"‚úÖ Found Experiment ID: {experiment_id}")

        runs = client.search_runs(experiment_ids=[experiment_id], order_by=["attributes.start_time DESC"])
        if not runs:
            raise Exception(f"No runs found for experiment ID {experiment_id}.")
        run_id = runs[0].info.run_id
        print(f"‚úÖ Found Run ID: {run_id}")

        # Write to GitHub Actions Environment
        with open(os.environ["GITHUB_ENV"], "a") as f:
            f.write(f"EXPERIMENT_ID={experiment_id}\n")
            f.write(f"RUN_ID={run_id}\n")
      shell: python


    - name: üì§ Upload MLflow Run Directory to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-run-data-${{ env.RUN_ID }}
        path: |
          ./mlruns/${{ env.EXPERIMENT_ID }}/${{ env.RUN_ID }}/
          ./MLProject/artifacts_temp/ 

    - name: üõ†Ô∏è Build Docker Image using MLflow
      run: |
        mlflow models build-docker --model-uri "runs:/${{ env.RUN_ID }}/random-forest-model-ci" --name "shopping-trends-ci:latest" --enable-mlserver
        
    - name: üîê Log in to Docker Hub
      run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

    - name: üè∑Ô∏è Tag Docker Image
      run: |
        docker tag shopping-trends-ci:latest ${{ env.DOCKER_USERNAME }}/shopping-trends-ci:latest

    - name: üö¢ Push Docker Image to Docker Hub
      run: |
        docker push ${{ env.DOCKER_USERNAME }}/shopping-trends-ci:latest

    - name: üì§ Post Log in to Docker Hub (Logout)
      if: always()
      run: docker logout

    - name: üßπ Post Set up Python
      if: always()
      run: echo "Post Python setup completed."

    - name: üßπ Post Checkout
      if: always()
      run: echo "Post checkout step completed."

    - name: ‚úÖ Complete Job
      if: always()
      run: echo "CI Workflow for ML and Docker finished successfully."